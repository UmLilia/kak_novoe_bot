import os
from datetime import date

from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import ContextTypes

from . import telegramcalendar
from .buttons import (ABOUT_US_BUTTONS, AROMA_BUTTONS, BASKET_BUTTONS,
                      CARE_SET_BUTTONS, CITIES_BUTTONS, IRONING_BUTTONS,
                      MAIN_BUTTONS, PREV_BUTTONS, PREV_NEXT_BUTTONS,
                      PRICES_BUTTONS, RETURN_MENU_BUTTONS,
                      SUBSCRIPTIONS_BUTTONS, TIME_BUTTONS, YES_NO_BUTTONS)
from .db import api_put, check_status, check_user, write_data
from .manager import send_manager_message
from .messanges import (ABOUT_TEXT, ADDRESS_TEXT, AGREE_DATA_TEXT, AROMA_TEXT,
                        BASKET_TEXT, CARE_SET_TEXT, FINISH_ORDER_TEXT,
                        GREETING_TEXT, HISTORY_TEXT, IRONING_TEXT,
                        MANAGER_CARE_SET_TEXT, MANAGER_STATUS_TEXT,
                        MANAGER_TEXT, ORDER_AGREE_TEXT, ORDER_TEXT,
                        PRICES_TEXT, SOME_TEXT, SPOTS_TEXT, THANKS_TEXT,
                        TIME_TEXT, WISHES_DELIVERY_TEXT, WISHES_TEXT,
                        MANAGER_REPLY_TEXT)
from .support_functions import (LOGO, LOGO_2, finish_message, finish_user,
                                get_additionally, get_image, send_message,
                                send_text_message, thanks_message)

TOKEN = os.environ['TOKEN']

ID_MANAGER = os.environ['ID_MANAGER']

(MAIN_MENU, PROFILE, IRONING, SPOTS, HISTORY, WISHES, DELIVERY, ADDRESS,
 DONE_ADDRESS) = range(9)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_photo(photo=get_image(LOGO))
    await send_message(update, GREETING_TEXT, MAIN_BUTTONS)
    return MAIN_MENU


async def wake_up(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_message(update, SOME_TEXT, MAIN_BUTTONS)
    return MAIN_MENU


async def basket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_message(
        update,
        BASKET_TEXT,
        BASKET_BUTTONS
    )
    return MAIN_MENU


async def about_us(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_photo(photo=get_image(LOGO_2))
    await send_message(update, ABOUT_TEXT, ABOUT_US_BUTTONS)
    return MAIN_MENU


async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_message(update, PRICES_TEXT, PRICES_BUTTONS)
    return MAIN_MENU


async def manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    user = message.from_user
    text = message.text
    await context.bot.send_message(
            chat_id=ID_MANAGER,
            text=(f'{user.first_name} {user.last_name} (https://t.me/'
                  f'{user.username}/ @{user.username} / tg://user?id={user.id}'
                  f' : {text}')
        )
    if '–í —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –º–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞' == text:
        await send_message(
            update,
            ('–°–µ–π—á–∞—Å —á—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–∏–¥—É–º–∞–µ–º! –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ '
             '–ø–∏—à–µ—Ç –≤–∞–º –≤ —á–∞—Ç–µ @knovoe. –ñ–¥–µ–º –≤–∞—Å —Ç–∞–º üå±'),
            RETURN_MENU_BUTTONS
        )
        await send_manager_message(
            user,
            (f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n–ù–∞ —Å–≤—è–∑–∏ –õ–∏–∑–∞, –≤–∞—à '
             '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä.\n\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –∞–¥—Ä–µ—Å '
             '(–≤–∫–ª—é—á–∞—è –≥–æ—Ä–æ–¥) –∏ –º—ã –ø–æ–¥—É–º–∞–µ–º, –∫–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏–µ–∑–¥ –∫—É—Ä—å–µ—Ä–∞ –∫'
             ' –≤–∞–º.')
        )
    elif '–û—Ç—Å–ª–µ–¥–∏—Ç—å –º–æ–π –∑–∞–∫–∞–∑' == text:
        await send_message(
            update,
            ('–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ '
             '–∑–∞–∫–∞–∑–∞. –û–Ω —Å–∫–æ—Ä–æ –Ω–∞–ø–∏—à–µ—Ç –≤–∞–º –≤ —á–∞—Ç–µ @knovoe üå±'),
            RETURN_MENU_BUTTONS
        )
        await send_manager_message(
            user,
            f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n{MANAGER_STATUS_TEXT}'
        )
    elif '–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–±–æ—Ä –∑–∞–±–æ—Ç—ã' == text:
        await send_message(
            update,
            MANAGER_REPLY_TEXT,
            RETURN_MENU_BUTTONS
        )
        await send_manager_message(
            user,
            f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n{MANAGER_CARE_SET_TEXT}'
        )
    elif '–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞' == text:
        await send_message(
            update,
            ('–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –ø–∏—à–µ—Ç –≤–∞–º –≤ —á–∞—Ç–µ @knovoe. '
             '–ñ–¥–µ–º –≤–∞—Å —Ç–∞–º üå±'),
            RETURN_MENU_BUTTONS
        )
        await send_manager_message(
            user,
            (f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n–ù–∞ —Å–≤—è–∑–∏ –õ–∏–∑–∞, –≤–∞—à '
             '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä.\n\n–Ø —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –≤–∞–º '
             '—Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ üßº\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ üå±')
        )
    else:
        await send_message(
            update,
            ('–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –ø–∏—à–µ—Ç –≤–∞–º –≤ —á–∞—Ç–µ @knovoe. '
             '–ñ–¥–µ–º –≤–∞—Å —Ç–∞–º üå±'),
            RETURN_MENU_BUTTONS
        )
        await send_manager_message(
            user,
            f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}! {MANAGER_TEXT}'
        )
    return MAIN_MENU


async def care_set(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_photo(photo=get_image(LOGO_2))
    await send_message(update, CARE_SET_TEXT, CARE_SET_BUTTONS)
    return MAIN_MENU


async def aroma(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    if check_status('api_users', user.id) is not True:
        await send_message(update, AGREE_DATA_TEXT, AROMA_BUTTONS)
        check_user(user)
        text = finish_user(user)
        await context.bot.send_message(
            chat_id=ID_MANAGER,
            text=text
        )
    await send_message(update, AROMA_TEXT, AROMA_BUTTONS)
    return PROFILE


async def ironing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    write_data('api_profile', user.id, 'aroma', update.message.text)
    await send_message(update, IRONING_TEXT, IRONING_BUTTONS)
    return IRONING


async def spots(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    api_put('api_profile', user.id, 'ironing', update.message.text)
    await send_message(update, SPOTS_TEXT, YES_NO_BUTTONS)
    return SPOTS


async def history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    api_put('api_profile', user.id, 'spots', update.message.text)
    await send_message(update, HISTORY_TEXT, YES_NO_BUTTONS)
    return HISTORY


async def wishes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    api_put('api_profile', user.id, 'history', update.message.text)
    await send_text_message(update, WISHES_TEXT, PREV_NEXT_BUTTONS)
    return WISHES


async def wishes_delivery(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    api_put('api_profile', user.id, 'wishes', update.message.text)
    await send_text_message(update, WISHES_DELIVERY_TEXT, PREV_NEXT_BUTTONS)
    return DELIVERY


async def thanks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    api_put('api_profile', user.id, 'delivery', update.message.text)
    await send_message(update, THANKS_TEXT, RETURN_MENU_BUTTONS)
    await context.bot.send_message(
            chat_id=ID_MANAGER,
            text=thanks_message(user)
        )
    return MAIN_MENU


async def conditions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_message(
        update,
        ORDER_TEXT,
        PREV_BUTTONS
    )
    return MAIN_MENU


async def order_agree(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text
    user = update.message.from_user
    address = get_additionally(user)
    check_user(user)
    write_data('api_order', user.id, 'type', message)
    if check_status('api_address', user.id) is True and address is not None:
        await order_date(update, context)
    else:
        await send_message(update, ORDER_AGREE_TEXT, CITIES_BUTTONS)
        return MAIN_MENU


async def address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    write_data('api_address', user.id, 'city', update.message.text)
    await context.bot.send_message(
            chat_id=ID_MANAGER,
            text=finish_user(user)
        )
    await send_text_message(update, ADDRESS_TEXT, PREV_NEXT_BUTTONS)
    return ADDRESS


async def additionally(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    api_put('api_address', user.id, 'address', update.message.text)
    await send_text_message(
        update,
        ('–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å, '
         '—á—Ç–æ–±—ã –∫—É—Ä—å–µ—Ä –±—ã—Å—Ç—Ä–µ–µ –Ω–∞—à–µ–ª –≤–∞—Å?'),
        PREV_NEXT_BUTTONS
    )
    return DONE_ADDRESS


async def write_additionally(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    api_put('api_address', user.id, 'additionally', update.message.text)
    await order_date(update, context)


async def subscription_order(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE):
    await send_message(
        update,
        '–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç',
        SUBSCRIPTIONS_BUTTONS
    )
    return MAIN_MENU


async def order_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_message(
        update,
        SOME_TEXT,
        PREV_BUTTONS
    )
    await update.message.reply_text(
        '–í –∫–∞–∫–æ–π –¥–µ–Ω—å –≤–∞–º —É–¥–æ–±–Ω–æ –±—ã–ª–æ –±—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞?',
        reply_markup=telegramcalendar.create_calendar()
    )
    return MAIN_MENU


async def time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected, my_date = await telegramcalendar.process_calendar_selection(
        update,
        context
    )
    if selected and my_date.date() >= date.today():
        api_put(
            'api_order',
            update.effective_chat.id,
            'date',
            my_date.strftime("%d/%m/%Y")
        )
        await context.bot.send_message(
            chat_id=update.callback_query.from_user.id,
            text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {my_date.strftime("%d/%m/%Y")}',
            reply_markup=ReplyKeyboardMarkup(
                TIME_BUTTONS, one_time_keyboard=True, resize_keyboard=True
            )
        )
        await context.bot.send_message(
            chat_id=update.callback_query.from_user.id,
            text=TIME_TEXT,
            reply_markup=ReplyKeyboardMarkup(
                TIME_BUTTONS, one_time_keyboard=True, resize_keyboard=True
            )
        )
        return MAIN_MENU
    elif my_date.date() < date.today():
        await context.bot.send_message(
            chat_id=update.callback_query.from_user.id,
            text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–µ —Ä–∞–Ω–µ–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è',
            reply_markup=telegramcalendar.create_calendar()
        )
        return MAIN_MENU


async def finish_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    api_put('api_order', user.id, 'time', update.message.text)
    text = f'–û—Ç–ª–∏—á–Ω–æ, {user.first_name}! {FINISH_ORDER_TEXT}'
    await send_message(update, text, RETURN_MENU_BUTTONS)
    await context.bot.send_message(
            chat_id=ID_MANAGER,
            text=finish_message(user)
        )
    return MAIN_MENU
